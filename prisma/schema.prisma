// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int     @id @default(autoincrement())
  username       String
  email          String  @unique
  phone_number   String  @unique
  password       String
  fullName       String
  profilePicture String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sosmed_account    Sosmed_account?
  avatar            Avatar?
  story             Story[]
  comment           Comment[]
  reaction          Reaction[]
  bookmark          Bookmark[]
  like              Like[]
  send_messages     Message[]       @relation("sender")
  received_messages Message[]       @relation("receiver")
  notification      Notification[]
  reStory           ReStory[]
  follower_user_id  Following[]     @relation("user_follower")
  following_user_id Following[]     @relation("user_following")

  CommunityMembership CommunityMembership[]
}

model Story {
  id          Int      @id @default(autoincrement())
  user_id     Int
  content     String
  image_link  String
  like_count  Int      @default(0)
  category_id Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users    Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)

  comment         Comment[]
  reaction        Reaction[]
  bookmark        Bookmark[]
  like            Like[]
  ReStory         ReStory[]
  CommunityTweets CommunityTweets[]
}

model Category {
  id            Int           @id @default(autoincrement())
  category_name CATEGORY_NAME
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  story Story[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  story_id   Int
  content    String
  commentAt  DateTime @updatedAt
  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  story Story @relation(fields: [story_id], references: [id], onDelete: Cascade)
}

model Platform {
  id            Int           @id @default(autoincrement())
  platform_name PLATFORM_NAME
  create_at     DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  sosmed_account Sosmed_account[]
}

model Sosmed_account {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  platform_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     Users    @relation(fields: [user_id], references: [id])
  platform Platform @relation(fields: [platform_id], references: [id])
}

model Avatar {
  id         Int      @id @default(autoincrement())
  image_link String
  user_id    Int      @unique
  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  user Users @relation(fields: [user_id], references: [id])
}

model Reaction {
  id            Int           @id @default(autoincrement())
  user_id       Int
  story_id      Int
  reaction_type REACTION_TYPE
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  user  Users @relation(fields: [user_id], references: [id])
  story Story @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id])
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  user_id    Int
  story_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  Users @relation(fields: [user_id], references: [id])
  story Story @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id])
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  story_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  story Story @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@unique([user_id, story_id])
}

model Message {
  id               Int      @id @default(autoincrement())
  sender_user_id   Int
  receiver_user_id Int
  message_content  String   @db.Text
  status           Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  sender   Users @relation("sender", fields: [sender_user_id], references: [id])
  receiver Users @relation("receiver", fields: [receiver_user_id], references: [id])
}

model Notification {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  notificationContent String   @db.Text
  notificationDate    DateTime
  status              Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user Users @relation(fields: [user_id], references: [id])
}

model ReStory {
  id        Int      @id @default(autoincrement())
  user_id   Int
  story_id  Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  user  Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  story Story @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@unique([user_id, story_id])
}

model Tag {
  id         Int      @id @default(autoincrement())
  tag_name   TAG_NAME
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Story_tag Story_tag[]
}

model Story_tag {
  id         Int      @id @default(autoincrement())
  tag_id     Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tag Tag @relation(fields: [tag_id], references: [id], onDelete: Cascade)
}

model Following {
  id                Int      @id @default(autoincrement())
  following_user_id Int
  follower_user_id  Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  follower_user  Users @relation("user_follower", fields: [follower_user_id], references: [id], onDelete: Cascade)
  following_user Users @relation("user_following", fields: [following_user_id], references: [id], onDelete: Cascade)

  @@unique([follower_user_id, following_user_id])
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members         CommunityMembership[]
  communityTweets CommunityTweets[]
}

model CommunityMembership {
  id           Int      @id @default(autoincrement())
  community_id Int
  user_id      Int
  joinedAt     DateTime @default(now())

  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  user      Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([community_id, user_id])
}

model CommunityTweets {
  id           Int      @id @default(autoincrement())
  community_id Int
  story_id     Int
  createdAt    DateTime @default(now())

  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  story     Story     @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@unique([community_id, story_id])
}

enum PLATFORM_NAME {
  facebook
  twitter
  instagram
  tiktok
}

enum CATEGORY_NAME {
  berita
  teknologi
  olahraga
  wisata
  lifestyle
  hiburan
}

enum REACTION_TYPE {
  like
  love
  haha
  wow
  sad
  angry
}

enum TAG_NAME {
  teknologi
  kesehatan
  travel
  makanan
  bisnis
}
